package annotations.test_factory_dynamic_tests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.TestFactory;

// @BeforeEach and @AfterEach methods and their corresponding extension callbacks are not executed for dynamic tests.
// In other words, if you access fields from the test instance within a lambda expression for a dynamic test, those fields
// are not reset by callback methods or extensions between the execution of dynamic tests generated by the same @TestFactory method.
public class SimpleTestLcCallbacks {
	
	@TestFactory
	public List<DynamicTest> test1() {
		return Arrays.asList(
			DynamicTest.dynamicTest("Dynamic square " + 2, () -> assertEquals(4, 2 * 2)),
			DynamicTest.dynamicTest("Dynamic true " + true, () -> assertTrue(true))
		);
	}
	
	@TestFactory
	public List<DynamicTest> test2() {
		return Arrays.asList(
			DynamicTest.dynamicTest("Dynamic square " + 2, () -> assertEquals(4, 2 * 2)),
			DynamicTest.dynamicTest("Dynamic true " + true, () -> assertTrue(true))
		);
	}
	
	@BeforeAll
	public static void init() {
		System.out.println("@BeforeAll method called.");
	}
	@AfterAll
	public static void clean() {
		System.out.println("@AfterAll method called.");
	}
	
	
	@BeforeEach
	public void beforeEach() {
		System.out.println("@BeforeEach method called.");
	}
	@AfterEach
	public void afterEach() {
		System.out.println("@AfterEach method called.");
	}
}
